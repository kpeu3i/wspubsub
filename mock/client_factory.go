// Code generated by MockGen. DO NOT EDIT.
// Source: client_factory.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	wspubsub "github.com/kpeu3i/wspubsub"
)

// MockWebsocketConnectionUpgrader is a mock of WebsocketConnectionUpgrader interface
type MockWebsocketConnectionUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketConnectionUpgraderMockRecorder
}

// MockWebsocketConnectionUpgraderMockRecorder is the mock recorder for MockWebsocketConnectionUpgrader
type MockWebsocketConnectionUpgraderMockRecorder struct {
	mock *MockWebsocketConnectionUpgrader
}

// NewMockWebsocketConnectionUpgrader creates a new mock instance
func NewMockWebsocketConnectionUpgrader(ctrl *gomock.Controller) *MockWebsocketConnectionUpgrader {
	mock := &MockWebsocketConnectionUpgrader{ctrl: ctrl}
	mock.recorder = &MockWebsocketConnectionUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebsocketConnectionUpgrader) EXPECT() *MockWebsocketConnectionUpgraderMockRecorder {
	return m.recorder
}

// Upgrade mocks base method
func (m *MockWebsocketConnectionUpgrader) Upgrade(w http.ResponseWriter, r *http.Request) (wspubsub.WebsocketConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade", w, r)
	ret0, _ := ret[0].(wspubsub.WebsocketConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upgrade indicates an expected call of Upgrade
func (mr *MockWebsocketConnectionUpgraderMockRecorder) Upgrade(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockWebsocketConnectionUpgrader)(nil).Upgrade), w, r)
}

// MockWebsocketConnection is a mock of WebsocketConnection interface
type MockWebsocketConnection struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketConnectionMockRecorder
}

// MockWebsocketConnectionMockRecorder is the mock recorder for MockWebsocketConnection
type MockWebsocketConnectionMockRecorder struct {
	mock *MockWebsocketConnection
}

// NewMockWebsocketConnection creates a new mock instance
func NewMockWebsocketConnection(ctrl *gomock.Controller) *MockWebsocketConnection {
	mock := &MockWebsocketConnection{ctrl: ctrl}
	mock.recorder = &MockWebsocketConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebsocketConnection) EXPECT() *MockWebsocketConnectionMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockWebsocketConnection) Read() (wspubsub.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(wspubsub.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockWebsocketConnectionMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockWebsocketConnection)(nil).Read))
}

// Write mocks base method
func (m *MockWebsocketConnection) Write(message wspubsub.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockWebsocketConnectionMockRecorder) Write(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWebsocketConnection)(nil).Write), message)
}

// Close mocks base method
func (m *MockWebsocketConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockWebsocketConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWebsocketConnection)(nil).Close))
}

// MockUUIDGenerator is a mock of UUIDGenerator interface
type MockUUIDGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockUUIDGeneratorMockRecorder
}

// MockUUIDGeneratorMockRecorder is the mock recorder for MockUUIDGenerator
type MockUUIDGeneratorMockRecorder struct {
	mock *MockUUIDGenerator
}

// NewMockUUIDGenerator creates a new mock instance
func NewMockUUIDGenerator(ctrl *gomock.Controller) *MockUUIDGenerator {
	mock := &MockUUIDGenerator{ctrl: ctrl}
	mock.recorder = &MockUUIDGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUUIDGenerator) EXPECT() *MockUUIDGeneratorMockRecorder {
	return m.recorder
}

// GenerateV4 mocks base method
func (m *MockUUIDGenerator) GenerateV4() wspubsub.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateV4")
	ret0, _ := ret[0].(wspubsub.UUID)
	return ret0
}

// GenerateV4 indicates an expected call of GenerateV4
func (mr *MockUUIDGeneratorMockRecorder) GenerateV4() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateV4", reflect.TypeOf((*MockUUIDGenerator)(nil).GenerateV4))
}
